#define MOD 10000000
using namespace std;
const int maxn = 5;
struct Matrix
{
    long long A[maxn][maxn];
    int size;

    Matrix()
    {
        memset(this, 0, sizeof (*this));
    }
};
long long mymod(long long x)
{
    return (x % MOD + MOD) % MOD;
}
Matrix operator+(Matrix m1, Matrix m2)
{
    Matrix ret;
    ret.size = m1.size;
    for (int i = 0; i < ret.size; ++i)
        for (int j = 0; j < ret.size; ++j)
            ret.A[i][j] = mymod(m1.A[i][j] + m2.A[i][j]);
    return ret;
}
Matrix operator-(Matrix m1, Matrix m2)
{
    Matrix ret;
    ret.size = m1.size;
    for (int i = 0; i < ret.size; ++i)
        for (int j = 0; j < ret.size; ++j)
            ret.A[i][j] = mymod(m1.A[i][j] - m2.A[i][j]);
    return ret;
}
Matrix operator*(Matrix m1, Matrix m2)
{
    Matrix ret;
    ret.size = m1.size;
    for (int i = 0; i < ret.size; ++i)
        for (int j = 0; j < ret.size; ++j)
        {
            ret.A[i][j] = 0;
            for (int k = 0; k < ret.size; ++k)
                ret.A[i][j] += m1.A[i][k] * m2.A[k][j];
            ret.A[i][j] = mymod(ret.A[i][j]);
        }
    return ret;
}
Matrix mypower(Matrix m, int n)
{
    Matrix ret, tmp;
    ret.size = m.size;
    if (n == 0)
    {
        for (int i = 0; i < ret.size; ++i)
            ret.A[i][i] = 1;
        return ret;
    }
    tmp = mypower(m, n / 2);
    if (n & 1)
        return tmp * tmp * m;
    else return tmp * tmp;
}
Matrix sumpower(Matrix m, int n)
{
    Matrix tmp;
    if (n == 1) return m;
    tmp = sumpower(m, n / 2);
    if (n & 1)
        return mypower(m, n / 2) * tmp + tmp + mypower(m, n);
    return mypower(m, n / 2) * tmp + tmp;
}
